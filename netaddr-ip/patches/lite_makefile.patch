Author: Nicholas Bamber <nicholas@periapt.co.uk>
Subject: stop overriting Lite/README
Last-Update: 2010-11-02
Forwarded: not-needed
--- a/Lite/Makefile.PL
+++ b/Lite/Makefile.PL
@@ -17,26 +17,26 @@
     'dist'		=> {COMPRESS=>'gzip', SUFFIX=>'gz'}
 );
 
-sub MY::top_targets {
-  package MY;
-  my $inherited = shift->SUPER::top_targets(@_);
-  $inherited =~ s/(pure_all\s+::.+)/$1 README/;
-  $inherited;
-}
+#sub MY::top_targets {
+#  package MY;
+#  my $inherited = shift->SUPER::top_targets(@_);
+#  $inherited =~ s/(pure_all\s+::.+)/$1 README/;
+#  $inherited;
+#}
 
-sub MY::post_constants {
-  my $post_constants = q|
-MY_POD2TEXT = |. $Config{scriptdirexp} .'/pod2text' .q|
-|;
-}
+#sub MY::post_constants {
+#  my $post_constants = q|
+#MY_POD2TEXT = |. $Config{scriptdirexp} .'/pod2text' .q|
+#|;
+#}
 
-sub MY::postamble {
-  package MY;
-  my $postamble = q|
-README  : |. $module .q|
-	@$(MY_POD2TEXT) |. $module .q| > README
-
-|;
-}
+##sub MY::postamble {
+#  package MY;
+#  my $postamble = q|
+#README  : |. $module .q|
+#	@$(MY_POD2TEXT) |. $module .q| > README
+#
+#|;
+#}
 
 WriteMakefile(%makeparms);
--- a/Lite/Util/README
+++ b/Lite/Util/README
@@ -117,32 +117,37 @@
             ::x:d.d.d.d
       and so on...
 
-    * $dotquad = inet_ntoa($netaddr);
+    *   $dotquad = inet_ntoa($netaddr);
+
         Convert a packed IPv4 network address to a dot-quad IP address.
 
           input:        packed network address
           returns:      IP address i.e. 10.4.12.123
 
-    * $netaddr = inet_aton($dotquad);
+    *   $netaddr = inet_aton($dotquad);
+
         Convert a dot-quad IP address into an IPv4 packed network address.
 
           input:        IP address i.e. 192.5.16.32
           returns:      packed network address
 
-    * $ipv6addr = ipv6_aton($ipv6_text);
+    *   $ipv6addr = ipv6_aton($ipv6_text);
+
         Takes an IPv6 address of the form described in rfc1884 and returns a
         128 bit binary RDATA string.
 
           input:        ipv6 text
           returns:      128 bit RDATA string
 
-    * $hex_text = ipv6_n2x($ipv6addr);
+    *   $hex_text = ipv6_n2x($ipv6addr);
+
         Takes an IPv6 RDATA string and returns an 8 segment IPv6 hex address
 
           input:        128 bit RDATA string
           returns:      x:x:x:x:x:x:x:x
 
-    * $dec_text = ipv6_n2d($ipv6addr);
+    *   $dec_text = ipv6_n2d($ipv6addr);
+
         Takes an IPv6 RDATA string and returns a mixed hex - decimal IPv6
         address with the 6 uppermost chunks in hex and the lower 32 bits in
         dot-quad representation.
@@ -150,7 +155,8 @@
           input:        128 bit RDATA string
           returns:      x:x:x:x:x:x:d.d.d.d
 
-    * $ipv6naddr = inet_any2n($dotquad or $ipv6_text);
+    *   $ipv6naddr = inet_any2n($dotquad or $ipv6_text);
+
         This function converts a text IPv4 or IPv6 address in text format in
         any standard notation into a 128 bit IPv6 string address. It
         prefixes any dot-quad address (if found) with '::' and passes it to
@@ -159,7 +165,8 @@
           input:        dot-quad or rfc1844 address
           returns:      128 bit IPv6 string
 
-    * $rv = hasbits($bits128);
+    *   $rv = hasbits($bits128);
+
         This function returns true if there are one's present in the 128 bit
         string and false if all the bits are zero.
 
@@ -179,11 +186,13 @@
           input:        128 bit IPv6 string
           returns:      true if any bits are present
 
-    * $rv = isIPv4($bits128);
+    *   $rv = isIPv4($bits128);
+
         This function returns true if there are no on bits present in the
         IPv6 portion of the 128 bit string and false otherwise.
 
-    * $dotquad or $hex_text = inet_n2dx($ipv6naddr);
+    *   $dotquad or $hex_text = inet_n2dx($ipv6naddr);
+
         This function does the right thing and returns the text for either a
         dot-quad IPv4 or a hex notation IPv6 address.
 
@@ -191,7 +200,8 @@
           returns:      ddd.ddd.ddd.ddd
                     or  x:x:x:x:x:x:x:x
 
-    * $dotquad or $dec_text = inet_n2ad($ipv6naddr);
+    *   $dotquad or $dec_text = inet_n2ad($ipv6naddr);
+
         This function does the right thing and returns the text for either a
         dot-quad IPv4 or a hex::decimal notation IPv6 address.
 
@@ -199,13 +209,15 @@
           returns:      ddd.ddd.ddd.ddd
                     or  x:x:x:x:x:x:ddd.ddd.ddd.dd
 
-    * $ipv6naddr = ipv4to6($netaddr);
+    *   $ipv6naddr = ipv4to6($netaddr);
+
         Convert an ipv4 network address into an ipv6 network address.
 
           input:        32 bit network address
           returns:      128 bit network address
 
-    * $ipv6naddr = mask4to6($netaddr);
+    *   $ipv6naddr = mask4to6($netaddr);
+
         Convert an ipv4 network address/mask into an ipv6 network mask.
 
           input:        32 bit network/mask address
@@ -213,28 +225,32 @@
 
         NOTE: returns the high 96 bits as one's
 
-    * $ipv6naddr = ipanyto6($netaddr);
+    *   $ipv6naddr = ipanyto6($netaddr);
+
         Similar to ipv4to6 except that this function takes either an IPv4 or
         IPv6 input and always returns a 128 bit IPv6 network address.
 
           input:        32 or 128 bit network address
           returns:      128 bit network address
 
-    * $ipv6naddr = maskanyto6($netaddr);
+    *   $ipv6naddr = maskanyto6($netaddr);
+
         Similar to mask4to6 except that this function takes either an IPv4
         or IPv6 netmask and always returns a 128 bit IPv6 netmask.
 
           input:        32 or 128 bit network mask
           returns:      128 bit network mask
 
-    * $netaddr = ipv6to4($pv6naddr);
+    *   $netaddr = ipv6to4($pv6naddr);
+
         Truncate the upper 96 bits of a 128 bit address and return the lower
         32 bits. Returns an IPv4 address as returned by inet_aton.
 
           input:        128 bit network address
           returns:      32 bit inet_aton network address
 
-    * $bitsXn = shiftleft($bits128,$n);
+    *   $bitsXn = shiftleft($bits128,$n);
+
           input:        128 bit string variable,
                         number of shifts [optional]
           returns:      bits X n shifts
@@ -242,7 +258,8 @@
           NOTE: a single shift is performed
                 if $n is not specified
 
-    * addconst($ipv6naddr,$signed_32con);
+    *   addconst($ipv6naddr,$signed_32con);
+
         Add a signed constant to a 128 bit string variable.
 
           input:        128 bit IPv6 string,
@@ -250,7 +267,8 @@
           returns:  scalar      carry
                     array       (carry, result)
 
-    * add128($ipv6naddr1,$ipv6naddr2);
+    *   add128($ipv6naddr1,$ipv6naddr2);
+
         Add two 128 bit string variables.
 
           input:        128 bit string var1,
@@ -258,7 +276,8 @@
           returns:  scalar      carry
                     array       (carry, result)
 
-    * sub128($ipv6naddr1,$ipv6naddr2);
+    *   sub128($ipv6naddr1,$ipv6naddr2);
+
         Subtract two 128 bit string variables.
 
           input:        128 bit string var1,
@@ -272,7 +291,8 @@
                 i.e.    if ARG1 >= ARG2 then carry = 1
                 or      if ARG1  < ARG2 then carry = 0
 
-    * ($spurious,$cidr) = notcontiguous($mask128);
+    *   ($spurious,$cidr) = notcontiguous($mask128);
+
         This function counts the bit positions remaining in the mask when
         the rightmost '0's are removed.
 
@@ -283,33 +303,39 @@
                             contiguous one's,
                         128 bit cidr number
 
-    * $bcdtext = bin2bcd($bits128);
+    *   $bcdtext = bin2bcd($bits128);
+
         Convert a 128 bit binary string into binary coded decimal text
         digits.
 
           input:        128 bit string variable
           returns:      string of bcd text digits
 
-    * $bits128 = bcd2bin($bcdtxt);
+    *   $bits128 = bcd2bin($bcdtxt);
+
         Convert a bcd text string to 128 bit string variable
 
           input:        string of bcd text digits
           returns:      128 bit string variable
 
-    * $modetext = mode;
+    *   $modetext = mode;
+
         Returns the operating mode of this module.
 
                 input:          none
                 returns:        "Pure Perl"
                            or   "CC XS"
 
-    * ($name,$aliases,$addrtype,$length,@addrs)=naip_gethostbyname(NAME);
+    *   ($name,$aliases,$addrtype,$length,@addrs)=naip_gethostbyname(NAME);
+
         Replacement for Perl's gethostbyname if Socket6 is available
 
-    * NetAddr::IP::Util::lower();
+    *   NetAddr::IP::Util::lower();
+
         Return IPv6 strings in lowercase.
 
-    * NetAddr::IP::Util::upper();
+    *   NetAddr::IP::Util::upper();
+
         Return IPv6 strings in uppercase. This is the default.
 
 EXAMPLES
@@ -353,6 +379,7 @@
         return ($vecip, $mask, $bits);
       }
 
+
       ... elsewhere
         $nip = {
             addr    => $vecip,

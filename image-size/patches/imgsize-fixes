exit with not zero if an error occures, fix pod.

--- a/imgsize
+++ b/imgsize
@@ -32,7 +32,7 @@
 =head1 OPTIONS
 
 By default, the width and height are returned as attributes for an IMG tag
-in HTML, essentially "C<WIDTH=40 HEIGHT=30>". The following options may be
+in HTML, essentially C<width="40" height="30">. The following options may be
 used to return alternate formats (all report width first, then height):
 
 =over
@@ -90,7 +90,7 @@
     if ($opt_h || (! @ARGV) || (($opt_a && $opt_r) || ($opt_a && $opt_f) ||
                                 ($opt_r && $opt_f)));
 
-$rtn = \&html_imgsize;
+$rtn = \&return_html;
 $opt_a &&
     ($rtn = \&return_attr);
 $opt_r &&
@@ -98,11 +98,13 @@
 $opt_f &&
     ($rtn = \&return_fmt);
 
+my $error = 0;
+
 if (@ARGV > 1)
 {
     foreach (@ARGV)
     {
-        print STDOUT sprintf("$_: %s\n", &$rtn($_));
+        print STDOUT sprintf("%s: %s\n", $_, &$rtn($_));
     }
 }
 else
@@ -110,7 +112,7 @@
     print STDOUT sprintf("%s\n", &$rtn($ARGV[0]));
 }
 
-exit;
+exit $error;
 
 #
 # Note the doubled calls here. This is just a quick, semi-clean attempt at
@@ -118,24 +120,31 @@
 # the Image::Size package.
 #
 
+sub return_html
+{
+    my ($html) = html_imgsize($_[0]);
+
+    (defined $html) ? $html : ("error", $error = 1);
+}
+
 sub return_attr
 {
     my ($width, $height, $err) = imgsize($_[0]);
 
     (defined $width) ?
-        "(-width => $width, -height => $height)" : "error: $err";
+        "(-width => $width, -height => $height)" : ("error: $err", $error = 1);
 }
 
 sub return_imgsize
 {
     my ($width, $height, $err) = imgsize($_[0]);
 
-    (defined $width) ? "$width $height" : "error: $err";
+    (defined $width) ? "$width $height" : ("error: $err", $error = 1);
 }
 
 sub return_fmt
 {
     my ($width, $height, $err) = imgsize($_[0]);
 
-    (defined $width) ? sprintf($opt_f, $width, $height, $err) : "error: $err";
+    (defined $width) ? sprintf($opt_f, $width, $height, $err) : ("error: $err", $error = 1);
 }

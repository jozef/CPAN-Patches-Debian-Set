Description: Fix several minor spelling errors in the manpage generated from Parser.pm
Author: Harlan Lieberman-Berg <H.LiebermanBerg@gmail.com>
Bug: https://rt.cpan.org/Public/Bug/Display.html?id=70353

--- a/lib/Makefile/Parser.pm
+++ b/lib/Makefile/Parser.pm
@@ -976,7 +976,7 @@
     T_FILES = t\main.cod.t t\bin2hex.exe.t t\hex2bin.exe.t $(MIN_T_FILES)
     DIRFILESEP = ^\
 
-"Simply expanded" variables' definition sytax in GUN make is also supported:
+"Simply expanded" variables' definition syntax in GUN make is also supported:
 
     FOO := blah blah blah
 
@@ -995,7 +995,7 @@
     %.o : %.c
         $(CC) -c $<
 
-Variable expansion sytax
+Variable expansion syntax
 
     ${abc}
 
@@ -1007,9 +1007,9 @@
 $(MAKE) and $(CC). Currently they will be left untouched if they're not set
 explicitly in the Makefile.
 
-Due to the current implementation, expansion of unrecognized built-in varaibles
+Due to the current implementation, expansion of unrecognized built-in variables
 and variables not previously defined by Makefile will NOT be performed. This
-behavior is different from any practial make tools, but is reasonable at
+behavior is different from any practical make tools, but is reasonable at
 this early stage of this parser.
 
 =item Explicit Rules
@@ -1036,7 +1036,7 @@
             main.cod pat_cover.pod pat_cover.html types.cod \
             hex2bin.exe hex2bin.obj
 
-Specital variable $@ will be expanded using its value in the context.
+Special variable $@ will be expanded using its value in the context.
 
 =item Implicit Rules
 
@@ -1050,7 +1050,7 @@
     %.exe : %.obj
         link /BATCH /NOLOGO $<;
 
-The special varaibles $< and $* will be expanded according to the context.
+The special variables $< and $* will be expanded according to the context.
 
 =item Old-Fashioned Suffix Rules
 
@@ -1157,7 +1157,7 @@
 
     all : ; echo 'hello, world!'
 
-Specital variable $@ will be expanded using its value in the context.
+Special variable $@ will be expanded using its value in the context.
 
 =back
 
@@ -1256,11 +1256,11 @@
 =item C<< @roots = $obj->roots() >>
 
 The C<roots> method returns the "root targets" in Makefile. The targets
-which there're no other targets depends on are called the I<root targets>.
+which there are no other targets depends on are called the I<root targets>.
 For example, I<install>, I<uninstall>, and I<veryclean>
 are all root targets in the Makefile generated by the I<ExtUtils::MakeMaker>
 module. On the other hand, I<clean> and I<test> are not, which may be
-somewhat counterintuitive. That's because there're some other targets
+somewhat counter-intuitive. That's because there are some other targets
 depend on I<clean>, I<test>, or both.
 
 The type of the returned list is an array of Makefile::Target objects.
--- a/lib/Makefile/Parser/GmakeDB.pm
+++ b/lib/Makefile/Parser/GmakeDB.pm
@@ -421,13 +421,13 @@
 
 The result of the parser is a makefile AST defined by L<Makefile::AST>.
 
-The "data base output listing" generated by C<make --print-data-base> is a detailed listing for GNU make's internal data structures, which is essentially the AST used by C<make>. According to GNU make's current maintainer, Paul Smith, this feature is provided primarily for debuging the user's own makefiles, and it also helps the GNU make developer team to diagnose the flaws in make itself. Incidentally this output is conformed to the GNU makefile syntax, and a lot of important information is provided in the form of makefile comments. Therefore, my GmakeDB parser is able to reuse the L<Makefile::DOM> module to parse this output listing.
+The "data base output listing" generated by C<make --print-data-base> is a detailed listing for GNU make's internal data structures, which is essentially the AST used by C<make>. According to GNU make's current maintainer, Paul Smith, this feature is provided primarily for debugging the user's own makefiles, and it also helps the GNU make developer team to diagnose the flaws in make itself. Incidentally this output is conformed to the GNU makefile syntax, and a lot of important information is provided in the form of makefile comments. Therefore, my GmakeDB parser is able to reuse the L<Makefile::DOM> module to parse this output listing.
 
 The data base output from GNU make can be divided into several clearly-separated segments. They're file header, "Variables", "Files", "VPATH Search Paths", as well as the last resource stats information.
 
-The contents of these segments are mostly obvious. The Files segment may deserve some explanation. It is the place for explict rules.
+The contents of these segments are mostly obvious. The Files segment may deserve some explanation. It is the place for explicit rules.
 
-Now let's take the Variables segment as an  example to demonstrate the format of the data base listing:
+Now let's take the Variables segment as an example to demonstrate the format of the data base listing:
 
     # Variables
 
@@ -496,7 +496,7 @@
 
 =item *
 
-GNU make does not escape meta characters appeared in rule targes and prerequisites in its data base listing. Examples are C<:>, C<\>, and C<#>. This bug has been reported to the GNU make team as C<Savannah bug #20067>.
+GNU make does not escape meta characters appeared in rule targets and prerequisites in its data base listing. Examples are C<:>, C<\>, and C<#>. This bug has been reported to the GNU make team as C<Savannah bug #20067>.
 
 This bug has not yet been fixed on the C<make> side, so I have to work around this issue by preprocessing the data base listing in the L<makesimple> script.
 

improves man pages

--- a/GParamSpec.xs
+++ b/GParamSpec.xs
@@ -210,6 +210,8 @@
 
 MODULE = Glib::ParamSpec	PACKAGE = Glib::ParamSpec	PREFIX = g_param_spec_
 
+=for object Glib::ParamSpec Wrapper to encapsulate metadate needed to specify parameters
+
 void
 DESTROY (GParamSpec * pspec)
     CODE:
@@ -809,7 +811,7 @@
  ## similarly, all unsigned integer types
 
 
-=for object Glib::Param::UInt
+=for object Glib::Param::UInt Wrapper for uint parameters in GLib
 
 =head1 DESCRIPTION
 
@@ -903,7 +905,7 @@
 
 MODULE = Glib::ParamSpec	PACKAGE = Glib::Param::Int64
 
-=for object Glib::Param::Int64
+=for object Glib::Param::Int64 Wrapper for int64 parameters in GLib
 
 =head1 DESCRIPTION
 
@@ -942,7 +944,7 @@
 
 MODULE = Glib::ParamSpec	PACKAGE = Glib::Param::UInt64
 
-=for object Glib::Param::UInt64
+=for object Glib::Param::UInt64 Wrapper for uint64 parameters in GLib
 
 =head1 DESCRIPTION
 
@@ -983,7 +985,7 @@
 
  ## and again for the floating-point types
 
-=for object Glib::Param::Double
+=for object Glib::Param::Double Wrapper for double parameters in GLib
 
 =head1 DESCRIPTION
 
@@ -1085,6 +1087,9 @@
 
 =cut
 
+=for object Glib::Param::Boolean Wrapper for boolean parameters in GLib
+=cut
+
 =for see_also Glib::ParamSpec
 =cut
 
@@ -1106,6 +1111,9 @@
 
 =cut
 
+=for object Glib::Param::Enum Wrapper for enum parameters in GLib
+=cut
+
 =for see_also Glib::ParamSpec
 =cut
 
@@ -1140,6 +1148,9 @@
 
 =cut
 
+=for object Glib::Param::Flags Wrapper for flag parameters in GLib
+=cut
+
 =for see_also Glib::ParamSpec
 =cut
 
@@ -1175,6 +1186,9 @@
 
 =cut
 
+=for object Glib::Param::String Wrapper for string parameters in GLib
+=cut
+
 =for see_also Glib::ParamSpec
 =cut
 
@@ -1203,6 +1217,9 @@
 
 =cut
 
+=for object Glib::Param::Unichar Wrapper for unichar parameters in GLib
+=cut
+
 =for see_also Glib::ParamSpec
 =cut
 
@@ -1227,6 +1244,9 @@
 
 MODULE = Glib::ParamSpec	PACKAGE = Glib::Param::GType
 
+=for object Glib::Param::GType Wrapper for GType parameters in GLib
+=cut
+
 #if GLIB_CHECK_VERSION(2, 10, 0)
 
 =for section DESCRIPTION
--- a/GType.xs
+++ b/GType.xs
@@ -2741,6 +2741,8 @@
 
 MODULE = Glib::Type	PACKAGE = Glib::Flags
 
+=for object Glib::Flags Overloaded operators representing GLib flags
+
 =for position DESCRIPTION
 
 =head1 DESCRIPTION
--- a/GUtils.xs
+++ b/GUtils.xs
@@ -489,6 +489,9 @@
 
 MODULE = Glib::Utils	PACKAGE = Glib::Markup	PREFIX = g_markup_
 
+=for object Glib::Markup Wrapper for markup handling functions in GLib
+=cut
+
 =for apidoc __function__
 =cut
 # gchar* g_markup_escape_text (const gchar *text, gssize length);
--- a/lib/Glib/MakeHelper.pm
+++ b/lib/Glib/MakeHelper.pm
@@ -440,7 +440,7 @@
 
 \$(INST_LIB)/\$(FULLEXT)/index.pod :: \$(INST_LIB)/\$(FULLEXT)/ build/podindex
 	\$(NOECHO) \$(ECHO) Creating POD index...
-	\$(NOECHO) $^X -e "print qq(\\n=head1 NAME\\n\\n\$(NAME) - API Reference Pod Index\\n\\n=head1 PAGES\\n\\n=over\\n\\n)" \\
+	\$(NOECHO) $^X -e "print qq(\\n=head1 NAME\\n\\n\$(NAME) \\\\- API Reference Pod Index\\n\\n=head1 PAGES\\n\\n=over\\n\\n)" \\
 		> \$(INST_LIB)/\$(FULLEXT)/index.pod
 	\$(NOECHO) $^X -ne "print q(=item L<) . (split q( ))[1] . qq(>\\n\\n);" < build/podindex >> \$(INST_LIB)/\$(FULLEXT)/index.pod
 	\$(NOECHO) $^X -e "print qq(=back\\n\\n);" >> \$(INST_LIB)/\$(FULLEXT)/index.pod
--- a/GOption.xs
+++ b/GOption.xs
@@ -652,6 +652,14 @@
 	gperl_register_fundamental (GPERL_TYPE_OPTION_ARG, "Glib::OptionArg");
 	gperl_register_fundamental (GPERL_TYPE_OPTION_FLAGS, "Glib::OptionFlags");
 
+=for object Glib::OptionContext defines options accepted by the commandline option parser
+
+=cut
+
+=for object Glib::OptionGroup group of options for command line option parsing
+
+=cut
+
 =for position SYNOPSIS
 
 =head1 SYNOPSIS

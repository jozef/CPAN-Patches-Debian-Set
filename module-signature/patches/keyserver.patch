Description: use subkeys.pgp.net instead of pgp.mit.edu
Author: gregor herrmann <gregoa@debian.org>
Origin: vendor
Forwarded: no
--- a/t/0-signature.t
+++ b/t/0-signature.t
@@ -18,7 +18,7 @@
 elsif ( -s 'SIGNATURE' == 0 ) {
     plan skip_all => "SIGNATURE file empty";
 }
-elsif (!eval { require Socket; Socket::inet_aton('pgp.mit.edu') }) {
+elsif (!eval { require Socket; Socket::inet_aton('subkeys.pgp.net') }) {
     plan skip_all => "Cannot connect to the keyserver to check module ".
                      "signature";
 }
--- a/lib/Module/Signature.pm
+++ b/lib/Module/Signature.pm
@@ -29,7 +29,7 @@
 $SIGNATURE      = 'SIGNATURE';
 $Timeout        = $ENV{MODULE_SIGNATURE_TIMEOUT} || 3;
 $Verbose        = $ENV{MODULE_SIGNATURE_VERBOSE} || 0;
-$KeyServer      = $ENV{MODULE_SIGNATURE_KEYSERVER} || 'pgp.mit.edu';
+$KeyServer      = $ENV{MODULE_SIGNATURE_KEYSERVER} || 'subkeys.pgp.net';
 $KeyServerPort  = $ENV{MODULE_SIGNATURE_KEYSERVERPORT} || '11371';
 $Cipher         = $ENV{MODULE_SIGNATURE_CIPHER} || 'SHA1';
 $Preamble       = << ".";
@@ -828,7 +828,7 @@
                 "Next time around, consider install Module::Signature, ",
                 "so you can verify the integrity of this distribution.\n";
     }
-    elsif (!eval { require Socket; Socket::inet_aton('pgp.mit.edu') }) {
+    elsif (!eval { require Socket; Socket::inet_aton('subkeys.pgp.net') }) {
         print "ok 1 # skip ",
                 "Cannot connect to the keyserver\n";
     }
